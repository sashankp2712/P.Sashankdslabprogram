#include <stdio.h>
#include <limits.h>

#define MAX_VERTICES 50

int minDistance(int dist[], int sptSet[], int num_vertices) {
    int min = INT_MAX, min_index;
    for (int v = 0; v < num_vertices; v++) {
        if (sptSet[v] == 0 && dist[v] <= min) {
            min = dist[v];
            min_index = v;
        }
    }
    return min_index;
}

void printSolution(int dist[], int num_vertices) {
    printf("Vertex \t\t Distance from Source\n");
    for (int i = 0; i < num_vertices; i++) {
        printf("%d \t\t %d\n", i, dist[i]);
    }
}

void dijkstra(int graph[MAX_VERTICES][MAX_VERTICES], int start_vertex, int num_vertices) {
    int dist[MAX_VERTICES];
    int sptSet[MAX_VERTICES];
    for (int i = 0; i < num_vertices; i++) {
        dist[i] = INT_MAX;
        sptSet[i] = 0;
    }
    dist[start_vertex] = 0;
    for (int count = 0; count < num_vertices - 1; count++) {
        int u = minDistance(dist, sptSet, num_vertices);
        sptSet[u] = 1;
        for (int v = 0; v < num_vertices; v++) {
            if (!sptSet[v] && graph[u][v] && dist[u] != INT_MAX && dist[u] + graph[u][v] < dist[v]) {
                dist[v] = dist[u] + graph[u][v];
            }
        }
    }
    printSolution(dist, num_vertices);
}

int main() {
    int num_vertices = 9;
    int graph[MAX_VERTICES][MAX_VERTICES] = {
        {0, 4, 0, 0, 0, 0, 0, 8, 0},
        {4, 0, 8, 0, 0, 0, 0, 11, 0},
        {0, 8, 0, 7, 0, 4, 0, 0, 2},
        {0, 0, 7, 0, 9, 14, 0, 0, 0},
        {0, 0, 0, 9, 0, 10, 0, 0, 0},
        {0, 0, 4, 14, 10, 0, 2, 0, 0},
        {0, 0, 0, 0, 0, 2, 0, 1, 6},
        {8, 11, 0, 0, 0, 0, 1, 0, 7},
        {0, 0, 2, 0, 0, 0, 6, 7, 0}
    };
    dijkstra(graph, 0, num_vertices);
    return 0;
}