#include <stdio.h>
#include <stdlib.h>

#define MAX_VERTICES 50

int queue[MAX_VERTICES];
int front = -1, rear = -1;
int visited[MAX_VERTICES] = {0};

void enqueue(int data) {
    if (rear == MAX_VERTICES - 1) {
        return; // Queue is full
    }
    if (front == -1) {
        front = 0;
    }
    queue[++rear] = data;
}

int dequeue() {
    if (front == -1 || front > rear) {
        return -1; // Queue is empty
    }
    return queue[front++];
}

void bfs(int graph[MAX_VERTICES][MAX_VERTICES], int start_vertex, int num_vertices) {
    visited[start_vertex] = 1;
    enqueue(start_vertex);
    while (front != -1 && front <= rear) {
        int current_vertex = dequeue();
        printf("%d ", current_vertex);
        for (int i = 0; i < num_vertices; i++) {
            if (graph[current_vertex][i] == 1 && !visited[i]) {
                visited[i] = 1;
                enqueue(i);
            }
        }
    }
}

int main() {
    int num_vertices = 5;
    int graph[MAX_VERTICES][MAX_VERTICES] = {
        {0, 1, 1, 0, 0},
        {1, 0, 0, 1, 1},
        {1, 0, 0, 0, 1},
        {0, 1, 0, 0, 0},
        {0, 1, 1, 0, 0}
    };
    printf("BFS traversal starting from vertex 0: ");
    bfs(graph, 0, num_vertices);
    printf("\n");
    return 0;
}